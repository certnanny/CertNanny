#############################################
#
# Sample configuration file for CertNanny 1.0 X.509 certificate renewal agent
#
# 2013-10-10 Arkadius C. Litwinczuk <arkadius.litwinczuk@gmail.com>
#
#############################################
# Global Keystore Default configuration
# these settings will be the default for every keystore configured
# can be overwritten in each keystore configuration

# Keystore state directory to store non-volatile Data inbetween CertNanny executions
keystore.DEFAULT.statedir                             = $(PreFix)/state

# SSCEP cert directory to write scep recived certificates 
keystore.DEFAULT.scepcertdir                          = $(PreFix)/state

# IMPORTANT: The auto renew days determine how many days prior to experation CertNanny starts a renewal. 
keystore.DEFAULT.autorenew_days                       = 30

# IMPORTANT: Warnexpiry days trigger a hook the value specifies how many days prior to expiration the hook is called. 
keystore.DEFAULT.warnexpiry_days                      = 20

# Scep signature should be set to old to execute a renewal signing the request with the old key
keystore.DEFAULT.scepsignaturekey                     = old
# sscep is the only supported enroll type for the time beeing.
keystore.DEFAULT.enroll.type                          = sscep
# SCEP server URL 
keystore.DEFAULT.enroll.sscep.URL                     =  http://example-scepserver.com/cgi-bin/scep/scep

# IMPORTANT This section  specifies the trust Anchors (Root CA Certificates) CertNanny will trust
keystore.DEFAULT.TrustedRootCA.AUTHORITATIVE.Directory     = $(PreFix)/AuthoratativeRootcerts

# Specify this if old Root CA certificates should be excluded automatically from the keystore
# keystore.DEFAULT.excludeexpiredrootcerts            = yes
# Specify this if new Root CA certificates should be included automatically into the keystore
# keystore.DEFAULT.excludenotyetvalidrootcerts        = no

# Enable Automatic root CA update via SCEP
# If the scep server support  SCEPs getNextCACert functionality you need to configure a few settings  
keystore.DEFAULT.rootcaupdate.enable                   = true
#Specify a directory where CertNanny will place new potential Root CA Certificates before installing them into the TrustedRootCAs 
keystore.DEFAULT.rootcaupdate.quarantinedir            = $(PreFix)/quarantine
#Quarantinetime in days how long is the quaratine for a new Root CA Certificate
keystore.DEFAULT.rootcaupdate.quarantinetime           = 180
# Accepted Signer certificate Regex 
# In order to prevent spoofing attacks it is required to supply a regular expersian that will be matched against # the signer certificates subject. 
keystore.DEFAULT.rootcaupdate.signerSubjectRegex       =  .*scep$
keystore.DEFAULT.rootcaupdate.signerIssuerSubjectRegex =  .*MyScep Server Issuer CN.*

# This setting completely disables any meta data passed in GET requests
# If enabled (yes) certnanyn will add the following get parameter: 
#    cnversion 	= CertNanny Version Number 
#    sysfqdn    	= Systems FQDN the request is send from
#    sysname    	= POSIX system name
#    sysrelease  	= POSIX system version
#    sysarch		= POSIX system archtecture
keystore.DEFAULT.enroll.sscep.monitorSysInfo           = yes

#In addition the user should be able to pass additional meta data to the SCEP server by adding additional meta configuration, e. g.:
# literal values
#keystore.DEFAULT.enroll.sscep.meta.ApplicationID                = 1337
#keystore.DEFAULT.enroll.sscep.meta.supportContact               = someone@formyserver.com


# NOTE: CertNanny can call an external program (e. g. shell script) to
#       act on certain events. This can be useful if you wish to integrate
#       a monitoring system, automatically activate a new keystore by
#       restarting your application or similar.
#       The general idea is that you define a command line that is executed
#       whenever a certain event occurs. In this sample configuration
#       the script notify.sh (which essentially prints its command line)
#       is called for each event.
#       Depending on the context, you can use the following tags which
#       are replaced by the corresponding value during the actual execution
#       of the hook script:
#       __ENTRY__     Entry name, i. e. the string you choose in the
#                     keystore definition section below for the keystore
#                     instance.
#                     For the 'keystore.myexample.*' keystore this will 
#                     expand to the string 'myexample'
#       __LOCATION__  Location path as defined for the keystore
#       __STATE__     Current state of the renewal process, may be one of
#                     'initial'      The renewal process has started
#                     'sendrequest'  The request is sent to the SCEP server
#                     'completed'    The renwal process has been completed
#       __NOTBEFORE__ Validity range of the (old) certificate, format:
#       __NOTAFTER__  YYYYMMDDHHMMSS.
#       __NEWCERT_NOTBEFORE__ Validity range of the new certificate, format:
#       __NEWCERT_NOTAFTER__  YYYYMMDDHHMMSS.
#	__FINGERPRINT__ 	Certificate fingerprint
#	__SERIAL__		Certificate Serial
#
# The pre-install hook is called after the requested certificate has 
# successfully been issued and fetched from the SCEP server and before
# it is installed in the new keystore.
keystore.DEFAULT.hook.renewal.install.pre = $(prefix)/bin/notify.sh pre-install __ENTRY__ __LOCATION__ __NEWCERT_NOTBEFORE__ __NEWCERT_NOTAFTER__
#
# The post-install hook is called after successful installation of the
# certificate in the new keystore.
keystore.DEFAULT.hook.renewal.install.post = $(prefix)/bin/notify.sh post-install __ENTRY__ __LOCATION__ __NEWCERT_NOTBEFORE__ __NEWCERT_NOTAFTER__
#
# The state hook is called upon every status change in the renewal process.
keystore.DEFAULT.hook.renewal.state = $(prefix)/bin/notify.sh renewalstate __ENTRY__ __LOCATION__ __STATE__
#
# The warnexpiry hook is called if the remaining certificate lifetime
# is less than the number days specified in the 'warnexpiry_days' setting.
# Note that no explit notification is generated for an expired certificate,
# but the NotAfter date is available in the corresponding variable (see
# above).
keystore.DEFAULT.hook.warnexpiry = $(prefix)/bin/notify.sh warnexpiry __ENTRY__ __LOCATION__ __NOTAFTER__

#The execution Hook is called everytime the CertNanny agent is executed and before it starts checking the keystore.
#This can be used as a kind of hartbeat for the agent if desired for monitoring reasons. 
keystore.DEFAULT.hook.execution                      = $(prefix)/bin/notify.sh execution __ENTRY__ __LOCATION__

# The pre-rootCA-install hook is called bevore the installation or deletion of a root CA certificate into the keystore
keystore.DEFAULT.hook.rootCA.install.pre                      = echo pre-roots-install __ENTRY__ __LOCATION__ 
# The post-rootCA-install hook is called after the installation or deletion of a root CA certificate into the keystore 
keystore.DEFAULT.hook.rootCA.install.post                      = echo post-roots-install __ENTRY__ __LOCATION__ 



