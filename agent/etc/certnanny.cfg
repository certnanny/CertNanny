#
#
# Sample configuration file for the CertNanny renewal script system
#
# 2005-09-30 Martin Bartosch <m.bartosch@cynops.de>
#
#Name of the CertNanny service
#platform.windows.servicename = CertNanny

#time frame for starting the renewal process (in seconds)
#platform.windows.serviceinterval = 86400



# NOTE: The variable 'prefix' is not required by CertNanny, instead
#       it is an example of how you can define your own variables to
#       be used in this configuration file. To reference it, simply
#       write $(variable). You can also reference all other variables
#       this way. Example: $(keystore.mykeystore.location)
prefix = /usr/local


# NOTE: These settings are necessary for CertNanny to work properly.
#       Adjust the values to reflect your local setup. It is highly
#       recommended to use absolute paths.
#
# OpenSSL location (required)
cmd.openssl = /usr/bin/openssl
#
# sscep binary location (required)
cmd.sscep = $(prefix)/bin/sscep
#
# gsk6cmd shell script location (optional)
# don't worry if you do not have gsk6cmd, this is only required if you
# intend to renew IBM GSK keystores.
cmd.gsk6cmd = /usr/bin/gsk6cmd

# only necessary for certain platforms (Windows):
# Location of the GSK lib directory containing the GSKit shared libraries
# ibmprefix = C:\Program Files\ibm
# path.gsklib = $(ibmprefix)\gsk7\lib
# NOTE: newer versions of GSKit do not allow to autodetect the GSKit
#       classpath. if you are experiencing problems ("unable to determine
#       GSKit classpath") uncomment the following line and make sure that
#       cmd.java is set properly
# path.gskclasspath = $(ibmprefix)\gsk7\classes\cfwk.zip;$(ibmprefix)\gsk7\classes\jlog.jar;$(ibmprefix)\gsk7\classes\gsk7cls.jar;$(ibmprefix)\gsk7\classes;$(ibmprefix)\IBM\WebSphere MQ\Java\lib\providerutil.jar;$(ibmprefix)\WebSphere MQ\Java\lib\com.ibm.mqjms.jar;$(ibmprefix)\WebSphere MQ\Java\lib\ldap.jar;$(ibmprefix)\WebSphere MQ\Java\lib\jta.jar;$(ibmprefix)\WebSphere MQ\Java\lib\jndi.jar;$(ibmprefix)\WebSphere MQ\Java\lib\jms.jar;$(ibmprefix)\WebSphere MQ\Java\lib\connector.jar;$(ibmprefix)\WebSphere MQ\Java\lib\fscontext.jar;$(ibmprefix)\WebSphere MQ\Java\lib\com.ibm.mq.jar


#
# java an keytool location (optional)
cmd.java = /usr/bin/java
cmd.keytool = /usr/bin/keytool

# temporary path to be used by CertNanny (required)
path.tmpdir = /tmp

# NOTE: Set the desired log level here. For common usage 2 or 3 should
#       be OK.
# 0: fatal, 1: error, 2: notice, 3: info, 4: debug, 5: scep verbose, 6: scep debug
loglevel = 3

#Name and destination of the certnanny logifle
logfile = /var/log/certnanny.log

###########################################################################
# DEFAULT section, these settings define defaults that are inherited
# by all keystore instances defined for the system.
#
# All keystore.DEFAULT.* settings are used by the keystore instances
# unless explicitly overridden in the actual keystore definition.


# NOTE: The following lines can be modified and uncommented to override the 
#       built-in thresholds for warning (20 days prior to expiry) and 
#       renewal (30 days prior to expiry) actions.
# 
# Default settings for all certificates
#keystore.DEFAULT.autorenew_days = 30
#keystore.DEFAULT.warnexpiry_days = 20


# NOTE: This setting influences the renewal mode (authentication of newly 
#       generated requests) used with the SCEP server. 
#       Use "old" to sign the new request with the previous key in 
#       order to trigger automatic approval on the SCEP server.
#
#       IMPORTANT: setting this to 'old' REQUIRES an sscep binary that
#       is patched to support signing the request with an existing key.
#       See contrib/README in the CertNanny distribution.
#        
# renewalmode: new (default), old (existing certificate)
keystore.DEFAULT.scepsignaturekey = old

# NOTE: Define the SCEP URL to be used for the renewal request.
#
# WARNING: This setting has changed. It used to be
# keystore.DEFAULT.scepurl
# that is NOT a valid setting anymore and will not work.
# Old configuration files HAVE to be changed accordingly!
#
# You can pass any options right to sscep through CertNanny
# sscep uses a configuration file with OpenSSL syntax
# Therefore, every setting belongs to a section and in every section
# you can define all available settings.
# The syntax is:
# keystore.DEFAULT.enroll.SECTION.SETTING = VALUE
# For example:
# keystore.DEFAULT.enroll.sscep_enroll.PollInterval = 5
# Note that sections and settings are case-sensitive.
# The only mandatory setting is the URL and you always have
# to specifiy the type:
# keystore.DEFAULT.enroll.type = sscep
# keystore.DEFAULT.enroll.sscep.URL = http://scep.example.com/cgi-bin/scep/scep

# NOTE: General HSM options
# 
# Set the path to the DLL/SO that can be used to load the engine
# Does not need to be set, if  OpenSSL has it compiled statically,
# but needs to be set even if OpenSSL has it in its search path.
#keystore.DEFAULT.hsm.dynamic_path

# NOTE: Define an HSM to use
#
# Excample for nCipher HSMs:
#keystore.DEFAULT.hsm.type=Chil
#keystore.DEFAULT.hsm.generatekey=/opt/nfast/bin/generatekey
#keystore.DEFAULT.hsm.keytype=embed
# 
# Define possible key options, all params that generatekey accepts
# can be used here (e.g. protect=token)
# Note: options like embedsavefile will be overwritten by CertNanny
#keystore.DEFAULT.hsm.key.protect=token
#keystore.DEFAULT.hsm.key.recovery=yes
#keystore.DEFAULT.hsm.key.size=2048



# NOTE: Designate a private directory for storing SCEP state information 
#       between invocations. The directory must be readable and writable 
#       for the CertNanny process.
keystore.DEFAULT.statedir = $(prefix)/lib/state
# it is recommended to use the same directory for this setting
keystore.DEFAULT.scepcertdir = $(keystore.DEFAULT.statedir)


# Policy for inclusion of configured Root Certificates in newly created
# keystores. It is recommended to exclude expired Root Certificates but
# to include not yet valid Root Certificates.
# Default settings:
# keystore.DEFAULT.excludeexpiredrootcerts = yes
# keystore.DEFAULT.excludenotyetvalidrootcerts = no


# IMPORTANT SECTION, READ IT CAREFULLY!
#
# NOTE: Explicitly define all Root Certificates to be trusted in the
#       enrollment process. The certificates must (currently) be stored
#       in PEM format. 
#       Make sure you start with rootcacert.1 and continue with .2, .3 
#       and so on for each additional certificate.
#
# Your Root CA Certificate
# You MUST configure at least one root certificate here!
#keystore.DEFAULT.rootcacert.1 = $(prefix)/lib/rootcerts/db-uat-root-ca-2.pem
#keystore.DEFAULT.rootcacert.2 = $(prefix)/lib/rootcerts/db-uat-root-ca-3.pem

# END OF IMPORTANT SECTION



# NOTE: CertNanny can call an external program (e. g. shell script) to
#       act on certain events. This can be useful if you wish to integrate
#       a monitoring system, automatically activate a new keystore by
#       restarting your application or similar.
#       The general idea is that you define a command line that is executed
#       whenever a certain event occurs. In this sample configuration
#       the script notify.sh (which essentially prints its command line)
#       is called for each event.
#       Depending on the context, you can use the following tags which
#       are replaced by the corresponding value during the actual execution
#       of the hook script:
#       __ENTRY__     Entry name, i. e. the string you choose in the
#                     keystore definition section below for the keystore
#                     instance.
#                     For the 'keystore.myexample.*' keystore this will 
#                     expand to the string 'myexample'
#       __LOCATION__  Location path as defined for the keystore
#       __STATE__     Current state of the renewal process, may be one of
#                     'initial'      The renewal process has started
#                     'sendrequest'  The request is sent to the SCEP server
#                     'completed'    The renwal process has been completed
#       __NOTBEFORE__ Validity range of the (old) certificate, format:
#       __NOTAFTER__  YYYYMMDDHHMMSS.
#       __NEWCERT_NOTBEFORE__ Validity range of the new certificate, format:
#       __NEWCERT_NOTAFTER__  YYYYMMDDHHMMSS.
#
# The pre-install hook is called after the requested certificate has 
# successfully been issued and fetched from the SCEP server and before
# it is installed in the new keystore.
keystore.DEFAULT.hook.renewal.install.pre = $(prefix)/bin/notify.sh pre-install __ENTRY__ __LOCATION__ __NEWCERT_NOTBEFORE__ __NEWCERT_NOTAFTER__
#
# The post-install hook is called after successful installation of the
# certificate in the new keystore.
keystore.DEFAULT.hook.renewal.install.post = $(prefix)/bin/notify.sh post-install __ENTRY__ __LOCATION__ __NEWCERT_NOTBEFORE__ __NEWCERT_NOTAFTER__
#
# The state hook is called upon every status change in the renewal process.
keystore.DEFAULT.hook.renewal.state = $(prefix)/bin/notify.sh renewalstate __ENTRY__ __LOCATION__ __STATE__
#
# The warnexpiry hook is called if the remaining certificate lifetime
# is less than the number days specified in the 'warnexpiry_days' setting.
# Note that no explit notification is generated for an expired certificate,
# but the NotAfter date is available in the corresponding variable (see
# above).
keystore.DEFAULT.hook.warnexpiry = $(prefix)/bin/notify.sh warnexpiry __ENTRY__ __LOCATION__ __NOTAFTER__



###########################################################################
#
# This section defines all local keystores to monitor.
# Add your entries to reflect your local setup, these are only examples
# that should help you define your own.
#
# The instances inherit all settings defined above for the 'DEFAULT'
# keystore. You may override each of these setting individually,
# see e. g. the mq2 definition for which certain default settings were
# overridden.


# OpenSSL example keystore
# You might want to use this e. g. for Apache web servers. Here the
# location points to the PEM encoded certificate, and the keystore
# definition also requires the specification of a private key file
# and (optionally) the private key PIN.
# 'format's supported: PEM (default), DER
# 'keytype's supported: OpenSSL (default), PKCS8
#
#keystore.cert100.location = $(prefix)/lib/certs/test100-cert.pem
#keystore.cert100.type = OpenSSL
#keystore.cert100.format = PEM
#keystore.cert100.keytype = OpenSSL
#keystore.cert100.keyfile = $(prefix)/lib/certs/test100-key.pem
#keystore.cert100.pin = 1234


# PKCS8 example keystore
#keystore.cert100.location = $(prefix)/lib/certs/test101-cert.der
#keystore.cert100.type = OpenSSL
#keystore.cert100.format = DER
#keystore.cert100.keytype = PKCS8
#keystore.cert100.keyfile = $(prefix)/lib/certs/test100-key.p8
#keystore.cert100.pin = 1234


# IBM MQ CMS example keystore, minimum configuration that is necessary.
# The 'mq1' is a label that ties the configuration entries together,
# you may choose any string you like, but it must be different between
# the individual keystores defined in this configuration file.
# Note that the 'location' must be the BASENAME of the MQ Keystore,
# i. e. the full path name WITHOUT the .kdb extension! For this example,
# the keystore file would be /usr/local/lib/certs/test.kdb
#
#keystore.mq1.location = $(prefix)/lib/certs/test
#keystore.mq1.type = MQ


# Another MQ example keystore, but this keystore will use a different
# SCEP server URL, different threshold dates and a custom post-install
# and warnexpiry hook function to demonstrate overriding of default values.
#
#keystore.mq2.location = $(prefix)/lib/certs/key
#keystore.mq2.type = MQ
#keystore.mq2.scepurl = http://scep2.example.com/cgi-bin/scep/scep
#keystore.mq2.autorenew_days = 10
#keystore.mq2.warnexpiry_days = 5
#keystore.mq2.hook.renewal.install.post = /usr/bin/logger -t certnanny -p local6.info "MQ keystore __ENTRY__ successfully installed to __LOCATION__. New certificate is valid between __NOTBEFORE__  and __NOTAFTER__"
#keystore.mq2.hook.warnexpiry = /usr/bin/logger -t certnanny -p local6.warning "MQ keystore __ENTRY__ installed in __LOCATION__ will expire on __NOTAFTER__"



# Example Java keystore
# location, type and pin are mandatory, all other options are optional
#keystore.java3.location = $(prefixtest)/keystore.jks
#keystore.java3.type = Java
#keystore.java3.pin = 123456
#keystore.java3.keypin = 123456
#keystore.java3.alias = mycert
#keystore.java3.provider = org.bouncycastle.jce.provider.BouncyCastleProvider
#keystore.java3.format = PKCS12
#keystore.java3.keyalg = RSA
#keystore.java3.sigalg = SHA1withRSA


# Example Windows keystore
#
# Define the Common Name field of your certificate
# Do not define the whole subject in DN syntax (CN = ..., O = ...)
#keystore.LABEL.location = example.com
#keystore.LABEL.type = Windows
#
# This defines whether the certificate is located in
# the user store (user) or not.
# If you include this setting, CertNanny will look in
# the storage of the user running CertNanny.
# Otherwise it will look in the machine store.
# The latter requires administrator's privileges.
# Note: You can not use the machine store unless you use
# the custom capi engine provided with CertNanny (see below for details)
#keystore.LABEL.storelocation = user
#
# You need to set the hsm.dynamic_path setting to OpenSSL
# capi engine dll (capi.dll) which is distributed with CertNanny
# If you use the one distributed with the OpenSSL version, you will 
# not be able to use the machine keystore. 
#keystore.LABEL.hsm.dynamic_path=$(prefix)/lib/capi
#
# The next setting specifies the path to a certreq.inf file
# It will be used by CertNanny to build a configuration file for certreq
# A sample configuration file is distributed with CertNanny
# Note that you can make any settings in it, but some will be overwritten by
# CertNanny according to other configuration
# One example of this is the Subject: CertNanny will automatically fill this field
#keystore.LABEL.certreqinf = $(prefix)/etc/certreq.inf


# Example Windows IIS keystore
#keystore.LABEL.location = CN=www.example.com,O=Example Ltd.,DC=example,DC=com
#keystore.LABEL.type = WindowsIIS
#keystore.LABEL.issuerregex = CN=Example CA .*,OU=PKI,O=Example Ltd.,DC=example,DC=com
#keystore.LABEL.storelocation = machine
#keystore.LABEL.instanceidentifier = 1


#Example PKCS#12 keystore
#keystore.p12.location = $(prefix)/lib/certs/mykeystore.p12
#keystore.p12.type = PKCS12
#keystore.p12.pin = 123456

# Example SAP keystore
#
# Where a certificate to be renewed  is found
# SAP writes to this directory, CertNanny reads from it
#keystore.sap.sap_to_certnanny_dir = $(prefix)/out

# Where the new certificate should be written to
# CertNanny writes to this directory, SAP reads from it
#keystore.sap.certnanny_to_sap_dir = $(prefix)/in

# How the file is named that contains the keystore
#keystore.sap.filename = keystore.xml
#keystore.sap.type = SAP

# How the tag is named that contains the PKCS#12 data
# default: P12DATA
#keystore.sap.p12_data_tag=P12DATA

# How the tag is named that contains the PIN
# default: PWD
#keystore.sap.p12_pwd_tag=PWD

# SAP Further notes:
# It is possible to implement multiple keystores with
# the same out & in directories. This is acheived by 
# configuring the default directory like this:
#keystore.DEFAULT.sap_to_certnanny_dir = $(prefix)/out
#keystore.DEFAULT.certnanny_to_sap_dir = $(prefix)/in
# After this you can configure individual filenames
